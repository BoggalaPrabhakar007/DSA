package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup
	matrixA := [][]int{{4, 5, 6}, {9, 4, 6}, {4, 9, 1}}
	matrixB := [][]int{{9, 8, 7}, {5, 7, 1}, {4, 5, 2}}
	rowLen := len(matrixA)
	colALen := len(matrixA[0])
	colBLen := len(matrixB[0])
	matrixC := make([][]int, rowLen)	
	for i := 0; i < rowLen; i++ {
		matrixC[i] = make([]int, len(matrixA[i]))
	}
	for i := 0; i < rowLen; i++ {
		for j := 0; j < colALen; j++ {
			wg.Add(1)
			go func(i, j int) {
				for k := 0; k < colBLen; k++ {
					matrixC[i][j] += matrixA[i][k] * matrixB[k][j]
				}
				defer wg.Done()
			}(i, j)
		}
	}

	wg.Wait()
	fmt.Println(matrixC)
}
